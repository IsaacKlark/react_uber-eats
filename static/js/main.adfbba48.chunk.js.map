{"version":3,"sources":["components/store/loadedData.js","components/store/storesMap.js","components/store/store.js","MainSection.js","App.js","index.js"],"names":["LoadedDataReducer","loadedData","arguments","length","undefined","action","type","StoresMapReducer","storesMap","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","connect","state","_ref","restaurant","useLocation","pathname","split","join","selectedRestaurant","filter","card","title","imageURL","food","openedHeader","openedCategories","openedTime","etaRange","text","heroImageUrl","categories","categorie","foundedCategorie","i","includes","react_default","a","createElement","className","src","alt","map","index","array","react","key","Math","random","react_router_dom","to","concat","uuid","onClick","window","scrollTo","setDataToStore","getAllDataFromUrl","dispatch","URL","_ref2","objectUrl","arrayOfStoresMap","regenerator_default","async","_context","prev","next","fetch","then","data","json","awrap","Promise","all","sent","Object","slicedToArray","values","stop","useEffect","src_MainSection","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.adfbba48.chunk.js","sourcesContent":["export const setLoadedData = loadedData => ({\n  type: 'URL_IS_LOADED',\n  loadedData,\n});\n\nconst LoadedDataReducer = (loadedData = [], action) => {\n  switch (action.type) {\n    case 'URL_IS_LOADED':\n      return action.loadedData;\n\n    default:\n      return loadedData;\n  }\n};\n\nexport default LoadedDataReducer;\n","export const setStoresMap = storesMap => ({\n  type: 'GET_STORES_MAP',\n  storesMap,\n});\n\nconst StoresMapReducer = (storesMap = [], action) => {\n  switch (action.type) {\n    case 'GET_STORES_MAP':\n      return action.storesMap;\n\n    default:\n      return storesMap;\n  }\n};\n\nexport default StoresMapReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport LoadedDataReducer, { setLoadedData } from './loadedData';\nimport StoresMapReducer, { setStoresMap } from './storesMap';\n\nconst rootReducer = combineReducers({\n  loadedData: LoadedDataReducer,\n  storesMap: StoresMapReducer,\n});\n\nexport const getAllDataFromUrl = () => async(dispatch) => {\n  const URL = fetch(\n    'https://mate-uber-eats-api.herokuapp.com/api/v1/restaurants'\n  ).then(data => data.json());\n  const [objectUrl] = await Promise.all([URL]);\n\n  dispatch(setLoadedData(objectUrl));\n\n  const arrayOfStoresMap = Object.values(objectUrl.data.storesMap);\n\n  dispatch(setStoresMap(arrayOfStoresMap));\n};\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MainSection = ({ storesMap }) => {\n  const location = useLocation();\n  const restaurant = location.pathname.split('/').join('');\n  const selectedRestaurant = storesMap.filter(card => (\n    card.title === restaurant\n  ));\n\n  let imageURL = '';\n  let food = storesMap;\n  let openedHeader = '';\n  let openedCategories = [];\n  let openedTime = '';\n\n  if (selectedRestaurant[0]) {\n    openedTime = selectedRestaurant[0].etaRange.text;\n    imageURL = selectedRestaurant[0].heroImageUrl;\n    openedHeader = selectedRestaurant[0].title;\n    openedCategories = selectedRestaurant[0].categories;\n    food = storesMap.filter((categorie) => {\n      let foundedCategorie = null;\n\n      for (let i = 1; i < categorie.categories.length; i += 1) {\n        if (\n          selectedRestaurant[0]\n            .categories.includes(categorie.categories[i])\n        ) {\n          foundedCategorie = categorie;\n        }\n      }\n\n      return foundedCategorie;\n    });\n  }\n\n  return (\n    <div>\n      <section className=\"card-opened\">\n        <img\n          src={imageURL}\n          alt=\"restaurant info\"\n          className={selectedRestaurant.length === 0\n            ? 'noDisplay' : 'selectedRestaurant'}\n        />\n\n        <div className=\"card__opened-info\">\n          <div className=\"opened__header\">\n            {openedHeader}\n            <ul className=\"card__ul opened__ul\">\n              {\n                openedCategories.map((categorie, index, array) => (\n                  <Fragment key={Math.random() * 100}>\n                    <li className=\"card__li\">\n                      {categorie}\n\n                      <span\n                        className={\n                          (index === array.length - 1) ? 'bull-none' : 'bull'\n                        }\n                      >\n                          &bull;\n                      </span>\n                    </li>\n                  </Fragment>\n                ))\n              }\n            </ul>\n          </div>\n          <div className=\"card__time opened__time\">\n            {openedTime}\n          </div>\n        </div>\n      </section>\n\n      <div className=\"cards\">\n        {\n          food.map(card => (\n            <Link\n              to={`/${card.title}`}\n              className=\"card\"\n              key={card.uuid}\n              onClick={() => {\n                window.scrollTo(0, 0);\n              }}\n            >\n              <img alt=\"dish\" src={card.heroImageUrl} className=\"card__img\" />\n              <section className=\"card__title\">\n                {card.title}\n              </section>\n              <ul className=\"card__ul\">\n                {\n                  card.categories.map((categorie, index, array) => (\n                    <Fragment key={Math.random() * 100}>\n                      <li className=\"card__li\">\n                        {categorie}\n\n                        <span\n                          className={\n                            (index === array.length - 1) ? 'bull-none' : 'bull'\n                          }\n                        >\n                          &bull;\n                        </span>\n                      </li>\n                    </Fragment>\n                  ))\n                }\n              </ul>\n              <div className=\"card__time\">\n                {card.etaRange.text}\n              </div>\n            </Link>\n          ))\n        }\n      </div>\n\n    </div>\n  );\n};\n\nconst getDataFromStore = state => ({\n  loadedData: state.loadedData,\n  storesMap: state.storesMap,\n});\n\nMainSection.propTypes = {\n  storesMap: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default connect(getDataFromStore)(MainSection);\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport * as store from './components/store/store';\nimport MainSection from './MainSection';\n\nconst App = ({ getAllDataFromUrl }) => {\n  useEffect(() => {\n    getAllDataFromUrl();\n  }, []);\n\n  return (\n    <HashRouter>\n      <MainSection />\n    </HashRouter>\n  );\n};\n\nconst getDataFromStore = state => ({\n\n});\n\nconst setDataToStore = {\n  getAllDataFromUrl: store.getAllDataFromUrl,\n};\n\nApp.propTypes = {\n  getAllDataFromUrl: PropTypes.func.isRequired,\n};\n\nexport default connect(getDataFromStore, setDataToStore)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './components/store/store';\n\nReactDOM.render(\n  <Provider store={store}><App /></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}